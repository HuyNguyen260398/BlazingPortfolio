@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider

<MudAppBar>
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" Class="mr-3" />
    <MudIcon Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Class="mr-3" />
    <MudLink Href="/" Underline="Underline.None"><MudText Typo="Typo.h6" Class="text-white">Huy NG</MudText></MudLink>
    <MudSpacer />
    <MudIconButton Icon="@Icons.Custom.Brands.LinkedIn" Color="Color.Inherit" />
    <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" />
    <AuthorizeView>
        <Authorized>
            <MudIconButton Icon="@Icons.Filled.Logout" Color="Color.Inherit" OnClick="Logout" />
        </Authorized>
        <NotAuthorized>
            <MudIconButton Icon="@Icons.Filled.Login" Color="Color.Inherit" OnClick="Login" />
        </NotAuthorized>
    </AuthorizeView>
</MudAppBar>

@if (DisplayDrawer)
{
    <Drawer DrawerOpen="_drawerOpen" />
}

@code
{
    [Parameter]
    public bool DisplayDrawer { get; set; } = true;

    private bool _drawerOpen = false;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void Login()
    {
        NavManager.NavigateTo("/admin/login");
    }

    private async Task Logout()
    {
        if (await LocalStorage.ContainKeyAsync("BearerToken"))
        {
            await LocalStorage.RemoveItemAsync("BearerToken");

            ((AppAuthenticationStateProvider)AuthStateProvider).SignOut();

            StateHasChanged();

            NavManager.NavigateTo("/");
        }
    }
}