@layout AuthLayout
@page "/admin/login"

@inject HttpClient HttpClient
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject ISnackbar Snackbar
@inject IUserRepo UserRepo

<MudGrid>
    <MudItem xs="12" Class="d-flex justify-center align-items-center" Style="height:100%">
        <MudPaper Elevation="5" Width="400px" Height="auto" Class="pa-5" Style="margin-top:200px">
            <MudItem Class="d-flex justify-center">
                <MudIcon Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Primary" Style="font-size: 5rem;" />
            </MudItem>
            <EditForm Model="User" class="ma-5">
                <DataAnnotationsValidator />
                <MudTextField Class="mt-5" @bind-Value="@User.Email" For="@(() => User.Email)" InputType="InputType.Email" Variant="Variant.Outlined" Label="Email">
                </MudTextField>
                <MudTextField Class="mt-5" @bind-Value="@User.Password" For="@(() => User.Password)" InputType="InputType.Password" Variant="Variant.Outlined" Label="Password">
                </MudTextField>
                <MudItem Class="d-flex justify-center mt-10">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" StartIcon="@Icons.Filled.Login" FullWidth="true" OnClick="HandleLogin">Login</MudButton>
                </MudItem>
            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code
{
    private UserDto User = new UserDto();

    private async Task HandleLogin()
    {
        var authData = new FormUrlEncodedContent(new[]
        {
                new KeyValuePair<string, string>("email", User.Email),
                new KeyValuePair<string, string>("password", User.Password),
        });

        var authResponse = await HttpClient.PostAsJsonAsync($"{ApiEndPoints.UserEndpoint}/login", User);

        if (!authResponse.IsSuccessStatusCode)
            Snackbar.Add("Attemp signin failed", Severity.Error);
        else
        {
            string jsonWebToken = await authResponse.Content.ReadAsStringAsync();

            // Work around for getting returned string from client
            var correctJsonWebToken = Regex.Replace(jsonWebToken, @"[^0-9a-zA-Z._'-]+", "");

            await LocalStorage.SetItemAsync("BearerToken", correctJsonWebToken);

            await ((AppAuthenticationStateProvider)AuthStateProvider).SignIn();

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jsonWebToken);

            NavManager.NavigateTo("/admin");
        }
    }
}