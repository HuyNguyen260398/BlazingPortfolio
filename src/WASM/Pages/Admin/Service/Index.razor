@page "/admin/services"

@inject NavigationManager NavManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IServiceRepo ServiceRepo

<Breadcrumbs />

<MudGrid>
    <MudItem xs="12" Class="mt-5">
        <MudTable Elevation="5" Items="@Services" Hover="true">
            <ToolBarContent>
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-5"></MudTextField>
                <MudSpacer />
            </ToolBarContent>
            <HeaderContent>
                <MudTh Class="text-center">Service</MudTh>
                <MudTh Class="text-center">Description</MudTh>
                <MudTh Class="text-center">Display Icon</MudTh>
                <MudTh>
                    <MudItem Class="d-flex justify-end">
                        <MudFab Color="Color.Secondary" StartIcon="@Icons.Filled.Add" Size="Size.Medium" Class="mx-3" Link="/admin/services/edit" />
                    </MudItem>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Class="text-center" DataLabel="Service">@context.Name</MudTd>
                <MudTd Class="text-center" DataLabel="Description">@context.Description</MudTd>
                <MudTd Class="text-center" DataLabel="Display Icon">@context.DisplayIcon</MudTd>
                <MudTd>
                    <MudItem Class="d-flex justify-end">
                        <MudFab Color="Color.Warning" StartIcon="@Icons.Filled.Edit" Size="Size.Medium" Class="mx-3" Link="@($"admin/services/edit/{context.ServiceId}")" />
                        <MudFab Color="Color.Error" StartIcon="@Icons.Filled.Delete" Size="Size.Medium" Class="mx-3" OnClick="(() => DeleteService(context.ServiceId))" />
                    </MudItem>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; }

    private IEnumerable<ServiceDto> Services = new List<ServiceDto>();
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        if (!user.Identity.IsAuthenticated)
        {
            var localRedirect = "/" + NavManager.ToBaseRelativePath(NavManager.Uri);
            NavManager.NavigateTo($"/admin/login?returnUrl={Uri.EscapeDataString(localRedirect)}");
        }

        Services = await ServiceRepo.GetAllAsync(ApiEndPoints.ServiceEndpoint);
    }

    private async void DeleteService(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Are you sure to delete this record?");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions();

        var deleteDialog = DialogService.Show<ConfirmDeleteDialog>("Delete", parameters, options);
        var confirmResult = await deleteDialog.Result;

        if (!confirmResult.Cancelled)
        {
            var deleteResult = await ServiceRepo.DeleteAsync(ApiEndPoints.ServiceEndpoint, id);

            if (deleteResult)
            {
                Snackbar.Add("Delete Success", Severity.Success);
                Services = await ServiceRepo.GetAllAsync(ApiEndPoints.ServiceEndpoint);
                StateHasChanged();
            }
            else
                Snackbar.Add("Delete Error", Severity.Error);
        }
    }
}