@page "/admin/images"

@inject NavigationManager NavManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IImageRepo ImageRepo

<Breadcrumbs />

<MudGrid>
    <MudItem md="3" sm="6" xs="12" Class="d-flex justify-center">
        <MudImage Elevation="5" Fluid="true" ObjectFit="ObjectFit.Cover" Src="@imageDataUrl" />
    </MudItem>
    <MudItem md="9" sm="6" xs="12">
        <MudPaper Elevation="5" Class="my-3">
            <MudGrid>
                <MudItem xs="12">
                    <EditForm Class="mx-5" Model="Image" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <MudTextField Class="mb-5" @bind-Value="@Image.Tooltip" For="@(() => Image.Tooltip)" Variant="Variant.Outlined" Label="Image Tooltip">
                        </MudTextField>
                        <MudSelect Class="mb-5" @bind-Value="@Image.ImageFor" T="string" Label="Image For" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                            <MudSelectItem T="string" Value="@("avatars")" />
                            <MudSelectItem T="string" Value="@("services")" />
                            <MudSelectItem T="string" Value="@("posts")" />
                        </MudSelect>
                        <MudItem Class="d-flex justify-end">
                            <InputFile id="fileInput" hidden multiple OnChange="HandleFileChange" />
                            <MudButton HtmlTag="label" for="fileInput" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.PhotoCamera" Class="mr-5">Browse</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Filled.CloudUpload">Upload</MudButton>
                        </MudItem>
                    </EditForm>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" Class="mt-5">
        <MudTable Elevation="5" Items="@Images" Hover="true">
            <ToolBarContent>
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-5"></MudTextField>
                <MudSpacer />
            </ToolBarContent>
            <HeaderContent>
                <MudTh Class="text-center">Image</MudTh>
                <MudTh Class="text-center">Relative Path</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Class="text-center" DataLabel="Image">
                    <MudImage Fluid="true" Height="200" Width="200" Src="@($"{ApiEndPoints.ServerBaseUrl}/{context.RelativeImagePath}")" />
                </MudTd>
                <MudTd Class="text-center" DataLabel="Relative Path">@context.RelativeImagePath</MudTd>
                <MudTd>
                    <MudItem Class="d-flex justify-end">
                        <MudFab Color="Color.Error" StartIcon="@Icons.Filled.Delete" Size="Size.Medium" Class="mx-3" OnClick="(() => DeleteImage(context.ImageId))" />
                    </MudItem>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>

@code
{
    private IEnumerable<ImageDto> Images = new List<ImageDto>();
    private ImageDto Image = new ImageDto();
    private IBrowserFile imageUpload;

    private bool _attemptUpload = false;
    private bool _attemptUploadFailed = false;
    private string imageDataUrl = "./asset/img/placeholder.png";
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        Images = await ImageRepo.GetAllAsync(ApiEndPoints.ImageEndpoint);
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        imageUpload = e.File;
        var format = "img/png";
        var resizedImageFile = await imageUpload.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizedImageFile.Size];
        await resizedImageFile.OpenReadStream().ReadAsync(buffer);
        imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task HandleSubmit()
    {
        await HandleUploadImage();
    }

    private async Task HandleUploadImage()
    {
        _attemptUpload = true;

        if (imageUpload.ContentType != "image/jpeg" && imageUpload.ContentType != "image/png")
        {
            Snackbar.Add("Invalid image type.", Severity.Warning);
            _attemptUploadFailed = true;
        }
        else if (imageUpload.Size >= 31000000) // ~30 megabytes
        {
            Snackbar.Add("Image must not larger than 30MB.", Severity.Warning);
            _attemptUploadFailed = true;
        }
        else
        {
            byte[] fileAsByte = new byte[imageUpload.Size];

            // Fills the content of the image byte array
            await imageUpload.OpenReadStream(31000000).ReadAsync(fileAsByte);
            var byteString = Convert.ToBase64String(fileAsByte);

            Image.NewImageExtension = imageUpload.Name.Substring(imageUpload.Name.Length - 4);
            Image.NewImageBase64Content = byteString;

            var relativeImagePath = await ImageRepo.SaveImageAsync(ApiEndPoints.ImageEndpoint, Image);

            if (String.IsNullOrWhiteSpace(relativeImagePath))
            {
                Snackbar.Add("Error upload image!", Severity.Error);
                _attemptUploadFailed = true;
            }
        }

        if (!_attemptUploadFailed)
        {
            Snackbar.Add("Upload image success!", Severity.Success);
            StateHasChanged();
            NavManager.NavigateTo("/admin/images", true);
        }

        _attemptUpload = false;
    }

    private async void DeleteImage(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Are you sure to delete this record?");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions();

        var deleteDialog = DialogService.Show<ConfirmDeleteDialog>("Delete", parameters, options);
        var confirmResult = await deleteDialog.Result;

        if (!confirmResult.Cancelled)
        {
            var deleteResult = await ImageRepo.DeleteAsync(ApiEndPoints.ImageEndpoint, id);

            if (deleteResult)
            {
                Snackbar.Add("Delete Success", Severity.Success);
                StateHasChanged();
                NavManager.NavigateTo("/admin/images", true);
            }
            else
                Snackbar.Add("Delete Error", Severity.Error);
        }
    }
}