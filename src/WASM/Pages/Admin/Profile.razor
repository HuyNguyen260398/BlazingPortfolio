@page "/admin/profile"

@inject HttpClient HttpClient
@inject IUserRepo UserRepo
@inject IImageRepo ImageRepo

<Breadcrumbs />

<MudGrid>
    <MudItem md="3" sm="6" xs="12" Class="mt-5">
        <MudPaper Elevation="5">
            <MudGrid>
                <MudItem xs="12" Class="d-flex justify-center">
                    <MudImage Fluid="true" ObjectFit="ObjectFit.Cover" Src="@($"{ApiEndPoints.ServerBaseUrl}/{User.AvatarImagePath}")" Height="200" Width="200" Class="rounded-circle" />
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h4" Class="text-center">
                        Huy Nguyen
                    </MudText>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h5" Class="mt-n3 text-center">
                        DotNet Developer.
                    </MudText>
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-center">
                    <InputFile id="fileInput" hidden multiple OnChange="HandleUploadImage" />
                    <MudFab Color="Color.Secondary" StartIcon="@Icons.Filled.PhotoCamera" HtmlTag="label" for="fileInput" Class="mx-1" />
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Filled.Edit" Class="mx-1" OnClick="HandleUpdateInfo" />
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem md="9" sm="6" xs="12" Class="mt-5">
        <MudPaper Elevation="5">
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h5" Class="ml-5"><span class="mud-primary-text"><strong>Personal Info</strong></span></MudText>
                </MudItem>
                <MudItem xs="12">
                    <EditForm Class="mx-5" Model="User" OnValidSubmit="HandleSaveUpdate" >
                        <MudGrid>
                            <MudItem md="6" sm="12" xs="12">
                                <MudTextField Class="mb-3" @bind-Value="@User.FirstName" Variant="Variant.Outlined" Label="First Name" ReadOnly="@readOnly"
                                              Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.DriveFileRenameOutline" AdornmentColor="Color.Dark">
                                </MudTextField>
                                <MudTextField Class="mb-3" @bind-Value="@User.DoB" Variant="Variant.Outlined" Label="DoB" ReadOnly="@readOnly"
                                              T="DateTime" Format="yyyy-MM-dd" InputType="InputType.Date">
                                </MudTextField>
                                <MudTextField Class="mb-3" @bind-Value="@User.Address" Variant="Variant.Outlined" Label="Address" ReadOnly="@readOnly"
                                              Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.LocationOn" AdornmentColor="Color.Dark">
                                </MudTextField>
                                <MudTextField Class="mb-3" @bind-Value="@User.Study" Variant="Variant.Outlined" Label="Study" ReadOnly="@readOnly"
                                              Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Business" AdornmentColor="Color.Dark">
                                </MudTextField>
                                <MudTextField Class="mb-3" @bind-Value="@User.Email" Variant="Variant.Outlined" Label="Email" ReadOnly="@readOnly"
                                              Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Email" AdornmentColor="Color.Dark">
                                </MudTextField>
                            </MudItem>
                            <MudItem md="6" sm="12" xs="12">
                                <MudTextField Class="mb-3" @bind-Value="@User.LastName" Variant="Variant.Outlined" Label="Last Name" ReadOnly="@readOnly"
                                              Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.DriveFileRenameOutline" AdornmentColor="Color.Dark">
                                </MudTextField>
                                <MudTextField Class="mb-3" @bind-Value="@gender" Variant="Variant.Outlined" Label="Gender" ReadOnly="@readOnly"
                                              Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Transgender" AdornmentColor="Color.Dark">
                                </MudTextField>
                                <MudTextField Class="mb-3" @bind-Value="@User.Interests" Variant="Variant.Outlined" Label="Interests" ReadOnly="@readOnly"
                                              Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.VideogameAsset" AdornmentColor="Color.Dark">
                                </MudTextField>
                                <MudTextField Class="mb-3" @bind-Value="@User.Degree" Variant="Variant.Outlined" Label="Degree" ReadOnly="@readOnly"
                                              Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.School" AdornmentColor="Color.Dark">
                                </MudTextField>
                                <MudTextField Class="mb-3" @bind-Value="@User.Phone" Variant="Variant.Outlined" Label="Phone" ReadOnly="@readOnly"
                                              Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Phone" AdornmentColor="Color.Dark">
                                </MudTextField>
                            </MudItem>

                            @if (!readOnly)
                            {
                                <MudItem xs="12" Class="d-flex justify-end">
                                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Filled.Save" Class="mt-n5">Save</MudButton>
                                </MudItem>
                            }

                        </MudGrid>
                    </EditForm>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    public string TextValue { get; set; }

    private UserDto User = new();
    private string gender = "Male";
    private bool readOnly = true;
    private bool _attemptUpload = false;
    private bool _attemptUploadFailed = false;
    private string _reasonUploadFailed = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        User = await UserRepo.GetUserAsync(ApiEndPoints.UserEndpoint);
    }

    private void HandleUpdateInfo()
    {
        readOnly = !readOnly;
    }

    private async Task HandleSaveUpdate()
    {
        var results = await UserRepo.UpdateAsync(ApiEndPoints.UserEndpoint, User);

        if (results)
            readOnly = true;

        StateHasChanged();
    }

    private async Task HandleUploadImage(InputFileChangeEventArgs e)
    {
        _attemptUpload = true;

        if (e.File.ContentType != "image/jpeg" && e.File.ContentType != "image/png")
        {
            _reasonUploadFailed = "Invalid image type.";
            _attemptUploadFailed = true;
        }
        else if (e.File.Size >= 31000000) // ~30 megabytes
        {
            _reasonUploadFailed = "Image must not larger than 30MB.";
            _attemptUploadFailed = true;
        }
        else
        {
            IBrowserFile uploadedFile = e.File;
            byte[] fileAsByte = new byte[uploadedFile.Size];

            // Fills the content of the image byte array
            await uploadedFile.OpenReadStream(31000000).ReadAsync(fileAsByte);
            string byteString = Convert.ToBase64String(fileAsByte);

            ImageDto avatarUploaded = new ImageDto()
            {
                NewImageExtension = uploadedFile.Name.Substring(uploadedFile.Name.Length - 4),
                NewImageBase64Content = byteString,
                OldImagePath = string.Empty
            };

            var relativeImagePath = await ImageRepo.SaveImageAsync(ApiEndPoints.ImageEndpoint, avatarUploaded);

            if (!String.IsNullOrWhiteSpace(relativeImagePath))
            {
                User.AvatarImagePath = relativeImagePath;
                await UserRepo.UpdateAsync(ApiEndPoints.UserEndpoint, User);
            }
            else
            {
                _reasonUploadFailed = $"Error update avatar";
                _attemptUploadFailed = true;
            }
        }
        _attemptUpload = false;
        StateHasChanged();
    }
}
